name: Build artifacts
run-name: Build artifact for ${{ inputs.crypto-type }} ${{ inputs.java-version }}

permissions:
  # This is required for requesting the OIDC token
  id-token: write

on:
  workflow_call:
    inputs:
      branch:
        type: string
        required: true
      java-version:
        type: string
        required: true
      use-server-rc:
        type: boolean
        required: false
        default: false
        description: "Test against server release candidate?"
      server-tag:
        type: string
        required: false
        default: "latest"
        description: "Server docker image tag"
      upload-artifacts:
        type: boolean
        required: false
        default: false
        description: "Upload built artifacts to github?"
      run-tests:
        type: boolean
        required: false
        default: false
        description: Spin up aerospike enterprise server and run tests
      crypto-type:
        type: string
        required: true
    secrets:
      GPG_SECRET_KEY:
        required: true
      GPG_PASS:
        required: true
      JFROG_OIDC_PROVIDER:
        required: true
      JFROG_OIDC_AUDIENCE:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "semeru" # See 'Supported distributions' for available options
          java-version: ${{ inputs.java-version }}
          gpg-private-key: ${{ secrets.GPG_SECRET_KEY }}
          gpg-passphrase: ${{ secrets.GPG_PASS }}

      - name: Build and test
        uses: ./.github/actions/build-and-test
        with:
          crypto-type: ${{ inputs.crypto-type }}
          server-tag: ${{ inputs.server-tag }}
          use-server-rc: ${{ inputs.use-server-rc }}

      - name: Generate docs and sources if release
        if: ${{ inputs.upload-artifacts == true }}
        working-directory: client
        run: |
          mvn source:jar javadoc:jar

      - name: Get artifact name
        id: get-artifact-name
        working-directory: client
        run: |
          echo artifact-name=$(mvn help:evaluate -Dexpression=project.build.finalName -q -DforceStdout) >> $GITHUB_OUTPUT

      - name: Get artifact ID
        id: get-artifact-id
        working-directory: client
        run: |
          echo artifact-id="aerospike-client${{ inputs.crypto-type == 'bouncycastle' && '-bc' || '' }}-jdk${{ inputs.java-version }}" >> $GITHUB_OUTPUT

      - name: Get artifact version
        id: get-artifact-version
        working-directory: client
        run: |
          echo artifact-version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout) >> $GITHUB_OUTPUT

      - name: Publish to JFrog
        if: ${{ !cancelled() && inputs.upload-artifacts == true }}
        uses: ./.github/actions/publish-to-jfrog
        with:
          crypto-type: ${{ inputs.crypto-type }}
          oidc-provider: ${{ secrets.JFROG_OIDC_PROVIDER }}
          oidc-audience: ${{ secrets.JFROG_OIDC_AUDIENCE }}
          artifact-name: ${{ steps.get-artifact-name.outputs.artifact-name }}
          artifact-id: ${{ steps.get-artifact-id.outputs.artifact-id }}
          artifact-version: ${{ steps.get-artifact-version.outputs.artifact-version }}
